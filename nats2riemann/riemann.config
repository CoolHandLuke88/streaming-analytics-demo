(logging/init {:console false})
;EXTRA_CLASSPATH https://stackoverflow.com/questions/27766730/riemann-io-add-jar-to-classpath
(logging/init {:file "./riemann.log"})


(let [host "127.0.0.1"]
(tcp-server {:host host})
(udp-server {:host host})
(repl-server {:host host})
(ws-server  {:host host}))

(instrumentation {:enabled? false})

; use function f to calculate metric over all events, and add title to the event metric. publish results to the index idx
; also set time to live for 24 hours, so we can read calculated metrics from the index
(defn aggregate [f title idx]
  (sreduce (fn [acc event] (apply f [[acc event]])) (smap #(assoc % :service (str (:service %) "_" title) :host nil :ttl (* 60 60 24 1000)) idx)))

(defn process-all-events [index]
      (where (and (not (host nil)) (not (state "expired")))
           (by :service
               (aggregate folds/sum "SUM" index)
               (aggregate folds/mean "AVG" index)
               (aggregate folds/minimum "MIN" index)
               (aggregate folds/maximum "MAX" index)
               )))


; считает среднее для КАЖДЫХ num-items сообщений, то есть это "бегущее" среднее, которое можно постоянно публиковать в индекс
(defn moving-average [num-items & children]
  (moving-time-window num-items (apply smap folds/mean children)))


; Expire old events from the index every 5 seconds.
(periodically-expire 60 {:keep-keys [:host :service :metric :ttl]})

(let [index (index)]
; Inbound events will be passed to these streams:
(streams
  (default :ttl 5
    ; Index all events immediately.
    ; index

    ; Log expired events.
    (expired
      (where (host nil)
        (fn [event] (info (:ttl event) (:service event) (:host event) (:metric event)))
      )
    )

    ; this one will result in infinite loop !-) as we sum even expired events with nil host
    ;(by :service (sreduce (fn [acc event] (folds/sum [acc event])) (with {:host nil} index)))

    (process-all-events index)

  )
))

;(streams (by :service (ewma-timeless 1/3 prn)))


;(streams (adjust [:service str " sum"] (sreduce (fn [acc event] (folds/sum [acc event])))))
;(streams (adjust [:service str " mean"] (sreduce (fn [acc event] (folds/mean [acc event])) index)))












